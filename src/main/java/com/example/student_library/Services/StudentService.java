package com.example.student_library.Services;

import com.example.student_library.DTOs.StudentUpdateMobRequestDto;
import com.example.student_library.Enums.CardStatus;
import com.example.student_library.Models.Card;
import com.example.student_library.Models.Student;
import com.example.student_library.Repositories.StudentRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.bind.annotation.RequestBody;

@Service
public class StudentService {
    @Autowired
    StudentRepository studentRepository;

    public String addStudent(Student student) {
        //Student from the postman is already the basic attributes set.


        //Card Should be autogenerated when createStudent function is called.
        Card card = new Card();
        card.setStatus(CardStatus.ACTIVATED); //Card status is being set.
        card.setStudent(student); //Foreign key attribute
        //Filling the value of the unidirectional part.


        //Lets go to the student
        student.setCard(card);


        //If there was a unidirectional mapping : we had to save both of them them
        //studentRepo.save () and cardRepo.save()
        //But we are super advance and are using bidirectional : Child will automatically be saved.

        studentRepository.save(student);
        //By cascading effect, child will automatically be saved (cardRepo will be saved)

        return "Student and Card added";
    }

    public String getNameByEmail(String email) {
        try {
            Student student = studentRepository.findByEmail(email);
            return student.getName();
        }catch (NullPointerException nullPointerException) {
            return "Invalid Email Id";
        }
    }

    public String updateMobile(StudentUpdateMobRequestDto studentUpdateMobRequestDto) {
        Student student = studentRepository.findById(studentUpdateMobRequestDto.getId()).get();
        student.setMobileNumber(studentUpdateMobRequestDto.getMobileNumber());

        studentRepository.save(student);
        return "Mobile number updated for " + student.getName();
    }
}
